import {
  ErrorResponse,
  getError,
  useAppContext,
} from "../../../utilities/utils/Utils";
import OtpInput from "react-otp-input";
import Box from "@mui/material/Box";
import { Formik, ErrorMessage, Form, Field, FormikHelpers } from "formik";
import { otpSchema } from "../../../schema/Index";
import { OtpAction, OtpState, OtpValues } from "../../../types/auth/types";
import { useEffect, useReducer, useState } from "react";
import { toast } from "react-toastify";
import axios from "axios";
import { authRequest } from "../../../base url/BaseUrl";

// Initial values for the OTP form
const initialOtpValues = {
  otp: "",
};

const reducer = (state: OtpState, action: OtpAction): OtpState => {
  switch (action.type) {
    case "SUBMIT_REQUEST":
      return { ...state, loading: true, error: "" };
    case "SUBMIT_SUCCESS":
      return { ...state, loading: false };
    case "SUBMIT_FAIL":
      return { ...state, loading: false, error: action.payload || "" };
    default:
      return state;
  }
};
const formatTime = (seconds: number) => {
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${String(minutes).padStart(2, "0")}:${String(
    remainingSeconds
  ).padStart(2, "0")}`;
};

export function EmailMobileOtpMenu() {
  const { state } = useAppContext();
  const { theme } = state;

  const handleSubmit = async (values: typeof initialOtpValues) => {
    console.log("Submitted Values:", values);
    // Add your submission logic here
  };
  return (
    <div className="modal_menu max_width_modal">
      <div
        className={`auth_content ${
          theme === "dark" ? "auth_content_dark" : ""
        }`}
      >
        <Box className="menu_modal otp_menu">
          <div className="header">
            <div className="title">
              <h4>Enter OTP</h4>
            </div>
            <div className="text">
              <small>
                We've sent 6 digit code generated by your Authenticator app{" "}
              </small>
            </div>
          </div>
          <div className="form_box">
            <Formik
              initialValues={initialOtpValues}
              validationSchema={otpSchema}
              onSubmit={handleSubmit}
            >
              {({ isSubmitting, setFieldValue, errors, values }) => {
                const isOtpComplete = values.otp.length === 6;
                const hasErrors =
                  Object.keys(errors).length > 0 || !isOtpComplete;

                return (
                  <Form>
                    <div className="inner_form">
                      <div className="form_group a_flex">
                        <Field name="otp">
                          {({
                            field,
                          }: {
                            field: { value: string; name: string };
                          }) => (
                            <OtpInput
                              value={field.value}
                              onChange={(otp) => setFieldValue("otp", otp)}
                              numInputs={6}
                              inputType="number"
                              renderSeparator={
                                <span className="input_span"></span>
                              }
                              renderInput={(props) => <input {...props} />}
                            />
                          )}
                        </Field>
                        <ErrorMessage
                          name="otp"
                          component="div"
                          className="error"
                        />
                      </div>

                      <div className="form_group">
                        <div className="btn c_flex">
                          <button
                            type="submit"
                            className={
                              hasErrors
                                ? "main_btn disabled l_flex"
                                : "main_btn active l_flex"
                            }
                            disabled={isSubmitting || hasErrors}
                          >
                            {isSubmitting ? (
                              <span className="a_flex">
                                <i className="fa fa-spinner fa-spin"></i>
                                Saving...
                              </span>
                            ) : (
                              "Save"
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  </Form>
                );
              }}
            </Formik>
          </div>
        </Box>
      </div>
    </div>
  );
}

export function VerifyEmailOtpMenu() {
  const { state } = useAppContext();
  const { theme } = state;

  const [, dispatch] = useReducer(reducer, {
    loading: true,
    error: "",
  });

  // Calculate initial countdown based on the stored end time
  const calculateInitialCountdown = () => {
    const storedEndTime = localStorage.getItem("otpResendEndTime");
    if (storedEndTime) {
      const remainingTime = Math.floor(
        (parseInt(storedEndTime, 10) - Date.now()) / 1000
      );
      return remainingTime > 0 ? remainingTime : 0;
    }
    return 0;
  };

  // State for countdown timer and disabling the button
  const [countdown, setCountdown] = useState(calculateInitialCountdown);
  const [isDisabled, setIsDisabled] = useState(countdown > 0);

  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => {
        setCountdown(countdown - 1);
        localStorage.setItem(
          "otpResendEndTime",
          (Date.now() + (countdown - 1) * 1000).toString()
        );
      }, 1000);
      return () => clearTimeout(timer);
    } else {
      setIsDisabled(false);
      localStorage.removeItem("otpResendEndTime");
    }
  }, [countdown]);

  // Function to handle OTP verification
  const handleVerifiedOTP = (isAccountVerified: boolean) => {
    const temporaryUserInfo = JSON.parse(
      localStorage.getItem("temporaryUserInfo") || "{}"
    );
    temporaryUserInfo.isAccountVerified = isAccountVerified;

    //localStorage.removeItem("temporaryUserInfo");
  };

  //=============
  // HANDLE SUBMIT
  //=============
  const handleSubmit = async (
    values: OtpValues,
    actions: FormikHelpers<OtpValues>
  ) => {
    try {
      dispatch({ type: "SUBMIT_REQUEST" });

      // Retrieve temporary user info from local storage
      const temporaryUserInfo = JSON.parse(
        localStorage.getItem("temporaryUserInfo") || "{}"
      );

      const { data } = await axios.put(
        `${authRequest}/verify-otp`,
        {
          otp: values.otp,
        },
        {
          headers: { Authorization: `Bearer ${temporaryUserInfo.token}` },
        }
      );

      dispatch({ type: "SUBMIT_SUCCESS", payload: data });
      toast.success("OTP verified, account created successfully", {
        position: "bottom-center",
      });
      setTimeout(() => {
        actions.resetForm();
      }, 2000);

      // Call the function here and pass the isAccountVerified value
      handleVerifiedOTP(data.isAccountVerified);
    } catch (err) {
      dispatch({
        type: "SUBMIT_FAIL",
        payload: getError(err as ErrorResponse),
      });
      toast.error(getError(err as ErrorResponse), {
        position: "bottom-center",
      });
    }
  };

  //==============================
  // Function to handle OTP resend
  //==============================
  const handleResendOtp = async () => {
    try {
      // Retrieve temporary user info from local storage
      const temporaryUserInfo = JSON.parse(
        localStorage.getItem("temporaryUserInfo") || "{}"
      );

      if (temporaryUserInfo && temporaryUserInfo.email) {
        // Your logic to resend OTP
        await axios.post(`${authRequest}/api/users/otp-verification`, {
          email: temporaryUserInfo.email,
          phone: temporaryUserInfo.phone,
        });

        toast.success("Verification email resent successfully", {
          position: "bottom-center",
        });

        setIsDisabled(true);
        const endTime = Date.now() + 60000; // 60 seconds from now
        setCountdown(60); // Start the countdown for 1 minute
        localStorage.setItem("otpResendEndTime", endTime.toString());
      } else {
        // Handle the case where email is not found in local storage
        toast.error("Email not found in local storage", {
          position: "bottom-center",
        });
      }
    } catch (err) {
      toast.error(getError(err as ErrorResponse), {
        position: "bottom-center",
      });
    }
  };

  return (
    <div className="modal_menu max_width_modal">
      <div
        className={`auth_content ${
          theme === "dark" ? "auth_content_dark" : ""
        }`}
      >
        <Box className="menu_modal otp_menu">
          <div className="header">
            <div className="title">
              <h4>Enter OTP</h4>
            </div>
            <div className="text">
              <small>We've sent 6 digit code to </small>
            </div>
            <div className="email">
              <small>emmanuel@example.com</small>
            </div>
          </div>
          <div className="form_box">
            <Formik
              initialValues={initialOtpValues}
              validationSchema={otpSchema}
              onSubmit={handleSubmit}
            >
              {({ isSubmitting, setFieldValue, errors, values }) => {
                const isOtpComplete = values.otp.length === 6;
                const hasErrors =
                  Object.keys(errors).length > 0 || !isOtpComplete;

                return (
                  <Form>
                    <div className="inner_form">
                      <div className="form_group a_flex">
                        <Field name="otp">
                          {({
                            field,
                          }: {
                            field: { value: string; name: string };
                          }) => (
                            <OtpInput
                              value={field.value}
                              onChange={(otp) => setFieldValue("otp", otp)}
                              numInputs={6}
                              inputType="number"
                              renderSeparator={
                                <span className="input_span"></span>
                              }
                              renderInput={(props) => <input {...props} />}
                            />
                          )}
                        </Field>
                        <ErrorMessage
                          name="otp"
                          component="div"
                          className="error"
                        />
                      </div>

                      <div className="form_group">
                        <div className="btn c_flex">
                          <button className="main_btn l_flex">
                            <span
                              onClick={isDisabled ? undefined : handleResendOtp}
                              style={{
                                cursor: isDisabled ? "not-allowed" : "pointer",
                              }}
                            >
                              {isDisabled ? "" : "Resend OTP"}
                            </span>
                            {isDisabled && (
                              <div className="timer">
                                {formatTime(countdown)} Sec
                              </div>
                            )}
                          </button>
                          <button
                            type="submit"
                            className={
                              hasErrors
                                ? "main_btn disabled l_flex"
                                : "main_btn active l_flex"
                            }
                            disabled={isSubmitting || hasErrors}
                          >
                            {isSubmitting ? (
                              <span className="a_flex">
                                <i className="fa fa-spinner fa-spin"></i>
                                Saving...
                              </span>
                            ) : (
                              "Save"
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  </Form>
                );
              }}
            </Formik>
          </div>
        </Box>
      </div>
    </div>
  );
}

export function VerifyMobileOtpMenu() {
  const { state } = useAppContext();
  const { theme } = state;

  const [, dispatch] = useReducer(reducer, {
    loading: true,
    error: "",
  });

  // Calculate initial countdown based on the stored end time
  const calculateInitialCountdown = () => {
    const storedEndTime = localStorage.getItem("otpResendEndTime");
    if (storedEndTime) {
      const remainingTime = Math.floor(
        (parseInt(storedEndTime, 10) - Date.now()) / 1000
      );
      return remainingTime > 0 ? remainingTime : 0;
    }
    return 0;
  };

  // State for countdown timer and disabling the button
  const [countdown, setCountdown] = useState(calculateInitialCountdown);
  const [isDisabled, setIsDisabled] = useState(countdown > 0);

  useEffect(() => {
    if (countdown > 0) {
      const timer = setTimeout(() => {
        setCountdown(countdown - 1);
        localStorage.setItem(
          "otpResendEndTime",
          (Date.now() + (countdown - 1) * 1000).toString()
        );
      }, 1000);
      return () => clearTimeout(timer);
    } else {
      setIsDisabled(false);
      localStorage.removeItem("otpResendEndTime");
    }
  }, [countdown]);

  // Function to handle OTP verification
  const handleVerifiedOTP = (isAccountVerified: boolean) => {
    const temporaryUserInfo = JSON.parse(
      localStorage.getItem("temporaryUserInfo") || "{}"
    );
    temporaryUserInfo.isAccountVerified = isAccountVerified;

    //localStorage.removeItem("temporaryUserInfo");
  };

  //=============
  // HANDLE SUBMIT
  //=============
  const handleSubmit = async (
    values: OtpValues,
    actions: FormikHelpers<OtpValues>
  ) => {
    try {
      dispatch({ type: "SUBMIT_REQUEST" });

      // Retrieve temporary user info from local storage
      const temporaryUserInfo = JSON.parse(
        localStorage.getItem("temporaryUserInfo") || "{}"
      );

      const { data } = await axios.put(
        `${authRequest}/api/users/verify-otp`,
        {
          otp: values.otp,
        },
        {
          headers: { Authorization: `Bearer ${temporaryUserInfo.token}` },
        }
      );

      dispatch({ type: "SUBMIT_SUCCESS", payload: data });
      toast.success("OTP verified, account created successfully", {
        position: "bottom-center",
      });
      setTimeout(() => {
        actions.resetForm();
      }, 2000);

      // Call the function here and pass the isAccountVerified value
      handleVerifiedOTP(data.isAccountVerified);
    } catch (err) {
      dispatch({
        type: "SUBMIT_FAIL",
        payload: getError(err as ErrorResponse),
      });
      toast.error(getError(err as ErrorResponse), {
        position: "bottom-center",
      });
    }
  };

  //==============================
  // Function to handle OTP resend
  //==============================
  const handleResendOtp = async () => {
    try {
      // Retrieve temporary user info from local storage
      const temporaryUserInfo = JSON.parse(
        localStorage.getItem("temporaryUserInfo") || "{}"
      );

      if (temporaryUserInfo && temporaryUserInfo.phone) {
        // Your logic to resend OTP
        await axios.post(`${authRequest}/api/users/otp-verification`, {
          phone: temporaryUserInfo.phone,
        });

        toast.success("Verification email resent successfully", {
          position: "bottom-center",
        });

        setIsDisabled(true);
        const endTime = Date.now() + 60000; // 60 seconds from now
        setCountdown(60); // Start the countdown for 1 minute
        localStorage.setItem("otpResendEndTime", endTime.toString());
      } else {
        // Handle the case where email is not found in local storage
        toast.error("Email not found in local storage", {
          position: "bottom-center",
        });
      }
    } catch (err) {
      toast.error(getError(err as ErrorResponse), {
        position: "bottom-center",
      });
    }
  };

  return (
    <div className="modal_menu max_width_modal">
      <div
        className={`auth_content ${
          theme === "dark" ? "auth_content_dark" : ""
        }`}
      >
        <Box className="menu_modal otp_menu">
          <div className="header">
            <div className="title">
              <h4>Enter OTP</h4>
            </div>
            <div className="text">
              <small>We've sent 6 digit code to </small>
            </div>
            <div className="email">
              <small>+234 8116915103</small>
            </div>
          </div>
          <div className="form_box">
            <Formik
              initialValues={initialOtpValues}
              validationSchema={otpSchema}
              onSubmit={handleSubmit}
            >
              {({ isSubmitting, setFieldValue, errors, values }) => {
                const isOtpComplete = values.otp.length === 6;
                const hasErrors =
                  Object.keys(errors).length > 0 || !isOtpComplete;

                return (
                  <Form>
                    <div className="inner_form">
                      <div className="form_group a_flex">
                        <Field name="otp">
                          {({
                            field,
                          }: {
                            field: { value: string; name: string };
                          }) => (
                            <OtpInput
                              value={field.value}
                              onChange={(otp) => setFieldValue("otp", otp)}
                              numInputs={6}
                              inputType="number"
                              renderSeparator={
                                <span className="input_span"></span>
                              }
                              renderInput={(props) => <input {...props} />}
                            />
                          )}
                        </Field>
                        <ErrorMessage
                          name="otp"
                          component="div"
                          className="error"
                        />
                      </div>

                      <div className="form_group">
                        <div className="btn c_flex">
                          <button className="main_btn l_flex">
                            <span
                              onClick={isDisabled ? undefined : handleResendOtp}
                              style={{
                                cursor: isDisabled ? "not-allowed" : "pointer",
                              }}
                            >
                              {isDisabled ? "" : "Resend OTP"}
                            </span>
                            {isDisabled && (
                              <div className="timer">
                                {formatTime(countdown)} Sec
                              </div>
                            )}
                          </button>
                          <button
                            type="submit"
                            className={
                              hasErrors
                                ? "main_btn disabled l_flex"
                                : "main_btn active l_flex"
                            }
                            disabled={isSubmitting || hasErrors}
                          >
                            {isSubmitting ? (
                              <span className="a_flex">
                                <i className="fa fa-spinner fa-spin"></i>
                                Saving...
                              </span>
                            ) : (
                              "Save"
                            )}
                          </button>
                        </div>
                      </div>
                    </div>
                  </Form>
                );
              }}
            </Formik>
          </div>
        </Box>
      </div>
    </div>
  );
}
